@Library("jenlib") _

try {
    stage("Cleanup") {
        runOnSlave(label: "frontend") {
            cleanWs()
        }
    }

    stage("Checkout") {
        runOnSlave(label: "frontend") {
            checkout scm
        }
    }
    stage("Flake8 check") {
        runOnSlave(label: "frontend") {
            inSingularity(app: "visionary-simulation") {
                jesh "flake8 --tee --output flake8.log"
            }

            recordIssues(qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
                         tools: [pep8(pattern: 'flake8.log')])
        }
    }
    stage("Build") {
        onSlurmResource(partition: "jenkins") {
            inSingularity(app: "visionary-simulation") {
                jesh "bash -x .ci/stages/build.sh"
            }
        }
    }
    stage("Analyze log") {
        runOnSlave(label: "frontend") {
            recordIssues(filters: [excludeFile('.*npy_1_7_deprecated_api.h$')],
                         qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
                         tools: [gcc()])
        }
    }
    stage("Build model-visionary-nest") {
        runOnSlave(label: "frontend") {
            inSingularity(app: "visionary-simulation") {
                jesh "bash -x .ci/stages/visionary-nest-checkout.sh"
            }
        }
        onSlurmResource(partition: "jenkins") {
            inSingularity(app: "visionary-simulation") {
                jesh "cd model-visionary-nest && bash -x .ci/stages/build.sh"
            }
        }
    }
    stage("Run tests") {
        onSlurmResource(partition: "jenkins") {
            inSingularity {
                jesh "bash -x .ci/stages/test.sh"
            }
            archiveArtifacts("tests/*.png")
            step([$class: 'XUnitPublisher',
                  thresholds: [[$class: 'FailedThreshold', unstableThreshold:'0']],
                  tools: [[$class: 'JUnitType', pattern: 'tests/test_results.xml']]])
        }
    }
} finally {
    runOnSlave(label: "frontend") {
        cleanWs()
    }
}
